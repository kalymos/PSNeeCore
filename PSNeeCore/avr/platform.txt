# Platform configuration for PSNeeCore AVR
name=PSNeeCore
version=1.3.7
architecture=psneecore

###############################################################################
# Upload tool (avrdude)
###############################################################################

tools.avrdude.path={runtime.tools.avrdude.path}
tools.avrdude.cmd.path={path}/bin/avrdude
tools.avrdude.config.path={path}/etc/avrdude.conf

tools.avrdude.program.params.verbose=-v
tools.avrdude.program.params.quiet=-q -q
tools.avrdude.program.verify=
tools.avrdude.program.params.noverify=-V
tools.avrdude.program.pattern="{cmd.path}" "-C{config.path}" -F {program.verbose} {program.verify} -p{build.mcu} -c{upload.protocol} {program.extra_params} -Uefuse:w:{upload.extended_fuses}:m -Uhfuse:w:{upload.high_fuses}:m -Ulfuse:w:{upload.low_fuses}:m "-Uflash:w:{build.path}/{build.project_name}.hex:i"

tools.avrdude.erase.params.verbose=-v -v -v -v
tools.avrdude.erase.params.quiet=-q -q
tools.avrdude.erase.pattern="{cmd.path}" "-C{config.path}" {erase.verbose} -p{build.mcu} -c{upload.protocol} {program.extra_params} -e -Uefuse:w:{upload.extended_fuses}:m -Uhfuse:w:{upload.high_fuses}:m -Ulfuse:w:{upload.low_fuses}:m

###############################################################################
# Compiler tool definitions
###############################################################################
# Defines the compiler tools (avr-gcc, avr-g++, etc.)

compiler.path={runtime.tools.avr-gcc.path}/bin/
compiler.c.cmd=avr-gcc
compiler.cpp.cmd=avr-g++
compiler.S.cmd=avr-gcc
compiler.ar.cmd=avr-ar
compiler.objcopy.cmd=avr-objcopy
compiler.elf2hex.cmd=avr-objcopy
compiler.size.cmd=avr-size

# Common compiler flags
compiler.c.flags=-c -g -Os -Wall
compiler.cpp.flags=-c -g -Os -Wall
compiler.S.flags=-c -g
compiler.ar.flags=rcs
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=-R .eeprom

###############################################################################
# Recipes for building
###############################################################################
# How source files are compiled and linked

## Compile C source files (.c -> .o)
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} {includes} "{source_file}" -o "{object_file}"

## Compile C++ source files (.cpp -> .o)
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} {includes} "{source_file}" -o "{object_file}"

## Compile Assembly source files (.S -> .o)
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} {includes} "{source_file}" -o "{object_file}"

## Create static library (core.a)
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" {object_files}

## Link objects into ELF file
recipe.c.combine.pattern="{compiler.path}{compiler.cpp.cmd}" -mmcu={build.mcu} -o "{build.path}/{build.project_name}.elf" {object_files} {archive_file_path} -lm

## Convert ELF to HEX file
recipe.elf2hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.extra_flags} -O ihex "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Optional: create EEPROM file
recipe.objcopy.eep.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.eep.extra_flags} -O ihex -j .eeprom "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.eep"

###############################################################################
# Size tool
###############################################################################
# Shows flash / RAM usage after compilation
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" --mcu={build.mcu} --format=avr "{build.path}/{build.project_name}.elf"

###############################################################################
# Optional binary export
###############################################################################
# Generates a .bin file in addition to the .hex
recipe.objcopy.bin.pattern="{compiler.path}{compiler.objcopy.cmd}" -O binary "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"
